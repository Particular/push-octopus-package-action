name: Push package to Octopus Deploy
description: 'Creates and pushes build output to Octopus Deploy for deployment.'
inputs:
  octopus-deploy-api-key:
    description: 'API key for Octopus Deploy, which should already be masked as a secret'
    required: true
  additional-metadata-paths:
    description: 'Additional metadata files that should be copied to the root of the deployment package. File patterns are supported, one pattern per line.'
    required: false
    default: ''
  throw-if-no-assets-found:
    description: Set to false if deploy package is only a meta package and no assets are generated
    required: false
    default: true
runs:
  using: "composite"
  steps:
    - name: Verify NuGet package signatures
      run: Get-ChildItem -Recurse -File nugets -Filter *.nupkg -ErrorAction:Ignore | foreach {dotnet nuget verify $_.FullName}
      shell: pwsh
    - name: Setup signtool environment variable
      if: runner.os == 'Windows'
      run: |
        $sdkMajor = Get-ChildItem 'C:\Program Files (x86)\Windows Kits\[0-9]*' | Select-Object -Property Name, @{Name = 'SortIndex'; Expression = {[int]$_.Name} } | Sort-Object -Descending -Property SortIndex | Select-Object -ExpandProperty Name -First 1
        $sdkVersion = Get-ChildItem "C:\Program Files (x86)\Windows Kits\$sdkMajor\bin\[0-9]*" | Sort-Object -Descending $_.FullName | Select-Object -ExpandProperty Name -First 1
        $signTool = "C:\Program Files (x86)\Windows Kits\{0}\bin\{1}\x64\signtool.exe" -f $sdkMajor,$sdkVersion

        if (Test-Path -Path $signTool) {
          echo "SIGNTOOL=$signTool" >> $Env:GITHUB_ENV
        }
        else {
          echo "Sign tool not found"
          exit 1
        }
      shell: pwsh
    - name: Verify executable signatures
      if: runner.os == 'Windows'
      run:  Get-ChildItem -Recurse -File assets -Filter *.exe -ErrorAction:Ignore | foreach {& "$($Env:SIGNTOOL)" verify /pa $_.FullName}
      shell: pwsh
    - name: Verify catalog file signatures
      if: runner.os == 'Windows'
      run:  Get-ChildItem -Recurse -File deploy -Filter *.cat -ErrorAction:Ignore  | foreach {& "$($Env:SIGNTOOL)" verify /pa $_.FullName}
      shell: pwsh
    - name: Create the files
      env:
        ADDITIONAL_METADATA_PATHS: ${{ inputs.additional-metadata-paths }}
        THROW_IF_NO_ASSETS_FOUND: ${{ inputs.throw-if-no-assets-found }}
      run: |
        # Check for required environment variables
        Write-Output "Looking in env vars for version info, found Version ${{env.MinVerVersion}}, Major ${{env.MinVerMajor}}, Minor ${{env.MinVerMinor}}"
        if ($env.MinVerVersion && $env.MinVerMajor && $env.MinVerMinor) {
          Write-Output "Version info OK"
        } else {
          throw "Version information from build not found in environment variables."
        }

        # Parse repo name
        $RepoFullName = "$env:GITHUB_REPOSITORY"
        $Org,$RepoName = $RepoFullName.Split('/')
        # Octopus actions will need the value in an environment variable
        echo "PARTICULAR_REPO_NAME=$RepoName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        # Creating the expected file layout for the Octopus package, including intermediate directories
        mkdir -p packaging/content

        # Include NuGet packages in the `nugets` folder
        # Octopus expects NuGet packages to have an extra .nzip extension for NuGet, .czip for Chocolatey
        if (Test-Path -Path nugets) {
          $nugets = Get-ChildItem -Path "./nugets/*.nupkg"
          foreach ($file in $nugets) {
            Copy-Item $file "./packaging/content/$($file.Name).nzip"
          }
        }

        # Include executables in the `assets` folder - used for ServiceControl, ServicePulse, ServiceInsight, etc.
        if (Test-Path -Path assets) {
          Copy-Item -Recurse assets/* ./packaging/content
        }

        # Make sure we aren't creating a package with zero contents
        $assetCount = (Get-ChildItem -Path ./packaging/content | Measure-Object).Count
        if ( ($assetCount -eq 0) -and ($env.THROW_IF_NO_ASSETS_FOUND) ) {
          throw "No assets were found for the deployment package"
        }

        # Octopus Deploy scripts need an executable file to recreate this metadata
        # $Branch is not really the branch name, when built from a tag it will be the tagged version string
        @"
        `$Branch = "${{github.ref_name}}"
        `$Version = "${{env.MinVerVersion}}"
        `$Product = "$RepoName"
        `$Major = "${{env.MinVerMajor}}"
        `$Minor = "${{env.MinVerMinor}}"
        `$Commit = "${{github.sha}}"
        "@ > packaging/Metadata.ps1

        if ($env:ADDITIONAL_METADATA_PATHS) {
          $patterns = ($env:ADDITIONAL_METADATA_PATHS -split '[\r\n]') -ne ''
          $patterns | ForEach-Object {
            Copy-Item $_ packaging
          }
        }
      shell: pwsh
    - name: Create an Octopus NuGet deployment package
      id: package
      uses: OctopusDeploy/create-nuget-package-action@v3.1.1
      with:
        package_id: ${{env.PARTICULAR_REPO_NAME}}.Deploy
        version: ${{env.MinVerVersion}}
        output_folder: octopus-package
        base_path: packaging
        files: |
          **/*.*
        nuspec_description: Deployment package for ${{env.PARTICULAR_REPO_NAME}} - not for nuget.org
        nuspec_authors: Particular Software
    - name: Publish Octopus Package Artifacts
      uses: actions/upload-artifact@v4.6.1
      with:
        name: ${{steps.package.outputs.package_filename}}
        path: ${{steps.package.outputs.package_file_path}}
        retention-days: 1
    - name: Push package to Octopus Deploy
      uses: OctopusDeploy/push-package-action@v3.2.3
      with:
        server: https://deploy.particular.net
        api_key: ${{ inputs.octopus-deploy-api-key }}
        packages: ${{steps.package.outputs.package_file_path}}
        space: "Default"
    - name: Create Octopus Deploy release
      uses: OctopusDeploy/create-release-action@v3.2.4
      with:
        server: https://deploy.particular.net
        api_key: ${{ inputs.octopus-deploy-api-key }}
        project: ${{env.PARTICULAR_REPO_NAME}}
        release_number: ${{env.MinVerVersion}}
        package_version: ${{env.MinVerVersion}}
        packages: "GitReleaseManager:0.17.0"
        space: "Default"
